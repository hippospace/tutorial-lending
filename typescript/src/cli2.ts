import { AptosParserRepo, getTypeTagFullname, StructTag, parseTypeTagOrThrow, u8, u64, u128, print, strToU8, u8str, DummyCache } from "@manahippo/move-to-ts";
import { AptosAccount, AptosClient, HexString, Types } from "aptos";
import { Command } from "commander";
import { App } from "./";
import * as fs from "fs";
import * as yaml from "yaml";
import * as Hippo_tutorial from './hippo_tutorial';

export const readConfig = (program: Command) => {
  const {config, profile} = program.opts();
  const ymlContent = fs.readFileSync(config, {encoding: "utf-8"});
  const result = yaml.parse(ymlContent);
  //console.log(result);
  if (!result.profiles) {
    throw new Error("Expect a profiles to be present in yaml config");
  }
  if (!result.profiles[profile]) {
    throw new Error(`Expect a ${profile} profile to be present in yaml config`);
  }
  const url = result.profiles[profile].rest_url;
  const privateKeyStr = result.profiles[profile].private_key;
  if (!url) {
    throw new Error(`Expect rest_url to be present in ${profile} profile`);
  }
  if (!privateKeyStr) {
    throw new Error(`Expect private_key to be present in ${profile} profile`);
  }
  const privateKey = new HexString(privateKeyStr);
  const client = new AptosClient(result.profiles[profile].rest_url);
  const account = new AptosAccount(privateKey.toUint8Array());
  console.log(`Using address ${account.address().hex()}`);
  return {client, account};
}

const program = new Command();

program
  .name('cli')
  .description('Move TS CLI generated by move-to-ts')
  .requiredOption('-c, --config <path>', 'path to your aptos config.yml (generated with "aptos init")')
  .option('-p, --profile <PROFILE>', 'aptos config profile to use', 'default')


const check_user = async () => {
  const {client, account} = readConfig(program);
  const app = new App(client).hippo_tutorial.lend2;
  const userAddr = account.address();
  const protocolAddr = app.moduleAddress;
  const user = await app.loadUser(userAddr);
  const protocol = await app.loadLendingProtocol(protocolAddr, false);
  print(user.user_get_limits(protocol));
  // send tx
  await app.withdraw(account, u64(1000000), [app.FakeBTC.getTag()]);
}

program
  .command("check-user")
  .action(check_user);


const check_user_global = async () => {
  const {client, account} = readConfig(program);
  const app = new App(client).hippo_tutorial.lend2;
  const userAddr = account.address();
  await app.loadUser(userAddr);
  await app.loadLendingProtocol(app.moduleAddress, false, true);
  print(app.app_global_get_user_limits(userAddr));
}

program
  .command("check-user-global")
  .action(check_user_global);


const check_user_async = async () => {
  const {client, account} = readConfig(program);
  const app = new App(client).hippo_tutorial.lend2;
  const userAddr = account.address();
  print(await app.app_global_get_user_limits(userAddr));
}

program
  .command("check-user-async")
  .action(check_user_async);

program.parse();
